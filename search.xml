<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>kali</title>
      <link href="/2023/04/21/kali/"/>
      <url>/2023/04/21/kali/</url>
      
        <content type="html"><![CDATA[<p><img src="/2023/04/21/kali/159.jpg"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Web</title>
      <link href="/2023/04/21/Web/"/>
      <url>/2023/04/21/Web/</url>
      
        <content type="html"><![CDATA[<h2 id="Flask项目-博客"><a href="#Flask项目-博客" class="headerlink" title="Flask项目-博客"></a>Flask项目-博客</h2><h3 id="整体框架"><a href="#整体框架" class="headerlink" title="整体框架"></a>整体框架</h3><pre><code>project/    app/        static/            js/            css/            img/        templates/            common/            main/            errors/            email/            user/            posts/        forms/        models/        views/        email.py        extensions.py         config.py    migrations/    venv/    test/    requirements.txt     manage.py</code></pre><h4 id="1-配置文件"><a href="#1-配置文件" class="headerlink" title="1.配置文件"></a>1.配置文件</h4><blockquote><p>config.py、__ init __.py、manage.py</p></blockquote><h4 id="2-配置相关扩展"><a href="#2-配置相关扩展" class="headerlink" title="2.配置相关扩展"></a>2.配置相关扩展</h4><blockquote><p>extensions.py、__ init __.py</p></blockquote><h4 id="3-配置蓝本"><a href="#3-配置蓝本" class="headerlink" title="3.配置蓝本"></a>3.配置蓝本</h4><blockquote><p>views目录 、__ init __.py</p></blockquote><h4 id="4-定制基础模板"><a href="#4-定制基础模板" class="headerlink" title="4.定制基础模板"></a>4.定制基础模板</h4><blockquote><p>common&#x2F;base.html</p></blockquote><h4 id="5-自定义错误页面"><a href="#5-自定义错误页面" class="headerlink" title="5.自定义错误页面"></a>5.自定义错误页面</h4><blockquote><p>templates&#x2F;errors&#x2F;404.html、__ init __.py</p></blockquote><h4 id="6-异步发送邮件"><a href="#6-异步发送邮件" class="headerlink" title="6.异步发送邮件"></a>6.异步发送邮件</h4><blockquote><p>email.py、templates&#x2F;email</p></blockquote><h4 id="7-用户相关"><a href="#7-用户相关" class="headerlink" title="7.用户相关"></a>7.用户相关</h4><blockquote><p><strong>密码需要加密存储与校验</strong></p></blockquote><pre><code class="python">from werkzeug.security import generate_password_hash, check_password_hash</code></pre><blockquote><p><strong>用户账号激活(token)</strong></p></blockquote><pre><code class="python">import timefrom itsdangerous import TimedJSONWebSignatureSerializer as Serializerserializer = Serializer(&#39;密钥&#39;, 5)  # 密钥 和 加密时间info = &#123;&quot;id&quot;: 3&#125;# 加密mi_info = serializer.dumps(info)print(mi_info)print(type(mi_info))  # 加密后是bytes类型mi_info = mi_info.decode()  # 变成字符串print(&quot;mi_info--&gt;&quot;, mi_info)time.sleep(5)  # 如果超时就会报错# 解密yuan_info = serializer.loads(mi_info)print(&quot;yuan_info--&gt;&quot;, yuan_info)</code></pre><hr><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><h4 id="1-注册与激活"><a href="#1-注册与激活" class="headerlink" title="1.注册与激活"></a>1.注册与激活</h4><blockquote><p>添加主页链接</p></blockquote><pre><code class="python"> &lt;li&gt;&lt;a href=&quot;&#123;&#123;url_for('user.register)&#125;&#125;&quot;&gt;注册&lt;/a&gt;&lt;/li&gt;</code></pre><blockquote><p>在user蓝本中添加视图函数</p></blockquote><blockquote><p>在template&#x2F;user&#x2F;中添加register.html</p></blockquote><blockquote><p>创建用户注册表单类</p></blockquote><pre><code class="python">class RegisterForm(FlaskForm):        username = StringField(&#39;用户名&#39;, validators=[DataRequired(),                                              Length(6, 18, message=&#39;用户名在6~18个字符&#39;)])    password = PasswordField(&#39;密码&#39;, validators=[DataRequired(),                                              Length(6, 18, message=&#39;密码在6~18个字符&#39;)])    confirm = PasswordField(&#39;确认密码&#39;, validators=[DataRequired(),                                              EqualTo(&#39;password&#39;, message=&#39;密码不一致&#39;)])    email = StringField(&#39;邮箱&#39;, validators=[Email(&#39;邮箱格式不正确&#39;)])    submit = SubmitField(&#39;注册&#39;)    # 自定义验证器，验证用户名    def validate_username(self, field):        if User.query.filter_by(username=field.data).first():            raise ValidationError(&#39;该用户名已存在&#39;)    def validate_email(self, field):        if User.query.filter_by(email=field.data).first():            raise ValidationError(&#39;该邮箱已存在&#39;)</code></pre><blockquote><p>创建表单对象并渲染</p></blockquote><pre><code class="python">@user.route(&#39;/register&#39;, methods=[&#39;GET&#39;, &#39;POST&#39;])def register():    form = RegisterForm()    if form.validate_on_submit():        # 创建对象        u = User(username=form.username.data, password=form.password.data,                 email=form.email.data)        # 写入数据库        try:            db.session.add(u)            db.session.commit()        except Exception as e:            flash(&#39;注册失败&#39;, e)        # 发送激活邮件        token = u.generate_activate_token()        send_mail(form.email.data, &#39;账号激活&#39;, &#39;email/account_activate&#39;,                  token=token, username=form.username.data)        flash(&#39;已发送激活邮件，请点击链接激活&#39;)        return redirect(url_for(&#39;main.index&#39;))    return render_template(&#39;user/register.html&#39;, form=form)</code></pre><blockquote><p>用户注册校验逻辑</p><p>用户注册邮件激活</p></blockquote><pre><code class="python">@user.route(&#39;/activate/&lt;token&gt;&#39;)def activate(token):    s = Serializer(current_app.config[&#39;SECRET_KEY&#39;])    try:        data = s.loads(token)    except Exception as e:        return &#39;token错误&#39;, e    return &#39;%d号账号已经激活&#39; % data.get(&#39;id&#39;)@user.route(&#39;/register&#39;, methods=[&#39;GET&#39;, &#39;POST&#39;])def register():    form = RegisterForm()    if form.validate_on_submit():        # 创建对象，写入数据库        # 发送激活邮件        s = Serializer(current_app.config[&#39;SECRET_KEY&#39;], expires_in=3600)        # 加密指定数据，以字典形式传入        token = s.dumps(&#123;&#39;id&#39;: 250&#125;)        send_mail(form.email.data, &#39;账号激活&#39;, &#39;email/account_activate&#39;,                  token=token, username=form.username.data)        flash(&#39;已发送激活邮件，请点击链接激活&#39;)        return redirect(url_for(&#39;main.index&#39;))    return render_template(&#39;user/register.html&#39;, form=form)</code></pre><blockquote><p>邮件发送</p></blockquote><pre><code class="python">def async_send_mail(app, msg):    # 发送邮件需要程序的上下文    # 在新的线程中没有上下文，需要手动创建    with app.app_context():        mail.send(msg)def send_mail(to, subject, template, **kwargs):    # 从current_app代理对象中获取程序的原始实例    app = current_app._get_current_object()    msg = Message(subject=subject, sender=app.config[&#39;MAIL_USERNAME&#39;],                  recipients=[to])    msg.html = render_template(template + &#39;.html&#39;, **kwargs)    msg.body = render_template(template + &#39;.txt&#39;, **kwargs)    # 创建线程    thr = Thread(target=async_send_mail, args=[app, msg])    thr.start()    return thr</code></pre><blockquote><p>用户模型设计</p></blockquote><pre><code class="python">class User(db.Model):    # 指定表名    __tablename__ = &#39;users&#39;    id = db.Column(db.Integer, primary_key=True)    username = db.Column(db.String(32), unique=True)    password_hash = db.Column(db.String(128))    email = db.Column(db.String(64), unique=True)    confirmed = db.Column(db.Boolean, default=False)        # 添加关联，相当于在关联模型中动态的添加了一个字段    posts = db.relationship(&#39;Posts&#39;, backref=&#39;user&#39;, lazy=&#39;dynamic&#39;)    # 保护字段    @property    def password(self):        raise AttributeError(&#39;密码不可读&#39;)    # 设置密码，加密存储    @password.setter    def password(self, password):        self.password_hash = generate_password_hash(password)    # 密码校验    def verify_password(self, password):        return check_password_hash(self.password_hash,password)    # 生成用户激活的token    def generate_activate_token(self, expires_in=3600):        s = Serializer(current_app.config[&#39;SECRET_KEY&#39;], expires_in=expires_in)        # 加密指定数据，以字典形式传入        return s.dumps(&#123;&#39;id&#39;: self.id&#125;)    # 激活账号时token校验， 校验时不知道用户信息，需要静态方法    @staticmethod    def check_activate_token(token):        s = Serializer(current_app.config[&#39;SECRET_KEY&#39;])        try:            data = s.loads(token)        except Exception as e:            print(e)            return False        user = User.query.get(data.get(&#39;id&#39;))        if user is None:            return False        if not user.confirmed:            user.confirmed = True            db.session.add(user)        return True</code></pre><h4 id="2-登陆认证与退出"><a href="#2-登陆认证与退出" class="headerlink" title="2.登陆认证与退出"></a>2.登陆认证与退出</h4><blockquote><p>安装<code>pip install flask_login</code></p></blockquote><blockquote><p>使用 flask_login</p></blockquote><pre><code class="python">from flask_login import LoginManagerlogin_manager = LoginManager()def config_extensions(app):       ...           # 登陆    login_manager.init_app(app)    # 会话保护级别：None，basic，strong    login_manager.session_protection = &#39;strong&#39;    # 设置登陆页面端点，用户访问需要登陆的页面，自动跳到此处    login_manager.login_view = &#39;user.login&#39;    # 设置提示信息    login_manager.login_message = &#39;需要登陆才可以访问&#39;</code></pre><blockquote><p>注意：</p><p>在<code>models/user.py</code>中添加一个回调函数</p></blockquote><pre><code class="python">@login_manager.user_loaderdef loader_user(user_id):    return User.query.get(int(user_id))</code></pre><blockquote><p>在<code>base.html</code>模板中：</p></blockquote><pre><code class="jinja2">&#123;% if current_user.is_authenticated %&#125;...&#123;% else %&#125;    ...&#123;% endif %&#125;</code></pre><blockquote><p>user蓝本中添加视图，使用<code>flask_login</code>中的<code>login_user</code>函数</p></blockquote><pre><code class="python">@user.route(&#39;/login&#39;, methods=[&#39;GET&#39;, &#39;POST&#39;])def login():    form = LoginForm()    if form.validate_on_submit():        u = User.query.filter_by(username=form.username.data).first()        if u is None:            flash(&#39;无效用户名&#39;)        elif u.verify_password(form.password.data):            login_user(u, remember=form.remember_me.data)            return redirect(request.args.get(&#39;next&#39;) or url_for(&#39;main.index&#39;))        else:            flash(&#39;密码错误&#39;)    return render_template(&#39;/user/login.html&#39;, form=form)</code></pre><blockquote><p>扩展库flask_login 提供很多功能</p></blockquote><blockquote><p><code>login_user</code>:完成用户的登陆，包括记住账户功能</p><p><code>logout_user</code>:退出账号</p><p><code>current_user</code>:在任意地方可以使用，表示当前登陆的账号</p><p>​    <code>is_authenticated</code>:是否已经登陆</p><p>​<code>is_anonymous</code>:是否是匿名用户</p></blockquote><h4 id="2-修改头像"><a href="#2-修改头像" class="headerlink" title="2.修改头像"></a>2.修改头像</h4><blockquote><p>配置</p></blockquote><pre><code class="python"># 文件大小 10MMAX_CONTENT_LENGTH = 10 * 1024 * 1024# 文件上传位置UPLOADED_PHOTOS_DEST = os.path.join(base_dir, &#39;app/static/upload&#39;)</code></pre><blockquote><p>添加flask_uploads扩展</p><p>类及函数</p></blockquote><pre><code class="python">from flask_uploads import UploadSet, IMAGESfrom flask_uploads import configure_uploads, patch_request_class</code></pre><blockquote><p>视图函数，上传头像并生成缩略图</p></blockquote><pre><code class="python">@user.route(&#39;/change_icon&#39;, methods=[&#39;GET&#39;, &#39;POST&#39;])@login_requireddef change_icon():    form = IconForm()    if form.validate_on_submit():        suffix = os.path.splitext(form.icon.data.filename)[1]        name = rand_str() + suffix        # 上传头像        photos.save(form.icon.data, name=name)        # 生成缩略图        pathname = os.path.join(current_app.config[&#39;UPLOADED_PHOTOS_DEST&#39;], name)        img = Image.open(pathname)        img.thumbnail((150, 150))        img.save(pathname)        # 删除原有头像        if current_user.icon != &#39;default.jpg&#39;:            os.remove(os.path.join(current_app.config[&#39;UPLOADED_PHOTOS_DEST&#39;],                                   current_user.icon))        # 保存新的头像        current_user.icon = name        db.session.add(current_user)        flash(&#39;头像已更换&#39;)    return render_template(&#39;/user/change_icon.html&#39;, form=form)</code></pre><blockquote><p>生成随机字符串</p></blockquote><pre><code class="python">def rand_str(length=12):    import random    base_str = &#39;abcdefghijklmnopqrstuvwxyz1234567890&#39;    return &#39;&#39;.join(random.choice(base_str) for i in range(length))</code></pre><hr><h3 id="博客管理"><a href="#博客管理" class="headerlink" title="博客管理"></a>博客管理</h3><h4 id="1-创建博客模型和表单"><a href="#1-创建博客模型和表单" class="headerlink" title="1.创建博客模型和表单"></a>1.创建博客模型和表单</h4><blockquote><p>博客模型</p></blockquote><pre><code class="python">class Posts(db.Model):    __tablename__ = &#39;posts&#39;    id = db.Column(db.Integer, primary_key=True)    content = db.Column(db.Text)    timestamp = db.Column(db.DateTime, default=datetime.utcnow)    rid = db.Column(db.Integer, index=True, default=0)    # 指定外键（表名.字段）    uid = db.Column(db.Integer, db.ForeignKey(&#39;users.id&#39;))</code></pre><blockquote><p>博客表单</p></blockquote><pre><code class="python">class PostsForm(FlaskForm):    content = TextAreaField(&#39;&#39;, render_kw=&#123;&#39;placeholder&#39;: &#39;想法&#39;&#125;,                              validators=[DataRequired(),                            Length(1, 128, message=&#39;字数过多&#39;)])    submit = SubmitField(&#39;发表&#39;)</code></pre><h4 id="2-发表并展示博客"><a href="#2-发表并展示博客" class="headerlink" title="2.发表并展示博客"></a>2.发表并展示博客</h4><pre><code class="python">@main.route(&#39;/&#39;, methods=[&#39;GET&#39;, &#39;POST&#39;])def index():    form = PostsForm()    if form.validate_on_submit():        if current_user.is_authenticated:            u = current_user._get_current_object()            p = Posts(content=form.content.data, user=u)            db.session.add(p)            return redirect(url_for(&#39;main.index&#39;))        else:            flash(&#39;请先登陆&#39;)            return redirect(url_for(&#39;user.login&#39;))    return render_template(&#39;main/index.html&#39;, form=form)</code></pre><blockquote><p><strong>分页显示</strong></p><p>插叙数据时使用专门的分页函数：<code>paginate</code>，参数如下</p></blockquote><blockquote><p><code>page</code>：是唯一的必须参数，表示当前页数</p><p><code>per_page</code>：每页显示的记录数，默认为20条</p><p><code>error_out</code>：页码超出范围时是否显示404，默认为True</p></blockquote><blockquote><p>函数返回值是一个对象<code>Pagination</code></p></blockquote><blockquote><p><strong>属性：</strong></p><p><code>items</code>：当前页面的所有记录</p><p><code>page</code>：当前的页码</p><p><code>pages</code>：总页数</p><p><code>total</code>：总记录数</p><p><code>prev_num</code>：上一页的页码</p><p><code>next_num</code>：下一页的页码</p><p><code>has_prev</code>：是否有上一页，有返回True</p><p><code>has_next</code>：是否有下一页，有返回True</p></blockquote><blockquote><p><strong>方法：</strong></p><p><code>iter_pages</code>：是一个迭代器，每次返回一个在分页导航条上的页码</p><p><code>prev</code>：上一页的分页对象</p><p><code>next</code>：下一页的分页对象</p></blockquote><blockquote><p>封装一个宏，用于分页显示</p></blockquote><pre><code class="python">&#123;% macro pagination_show(pagination, endpoint) %&#125;<nav aria-label="Page navigation">  <ul class="pagination">    &#123;# 上一页 #&#125;    <li &#123;%if not pagination.has_prev %&#125; class="disabled" &#123;% endif>      <a href="&#123;% if pagination.has_prev %&#125;               &#123;&#123;url_for(endpoint, page=pagination.prev_num, **kwargs)&#125;&#125;               &#123;% endif %&#125;" aria-label="Previous">        <span aria-hidden="true">&laquo;</span>      </a>    </li>    &#123;# 分页页码 #&#125;    &#123;% for p in pagination.iter_pages() %&#125;    &#123;% print p,'aaa  ' %&#125;    &#123;% if p %&#125;    <li &#123;% if pagination.page="=p" %&#125; class="active" endif>      <a href="&#123;&#123;url_for(endpoint, page=p, **kwargs)&#125;&#125;">&#123;&#123;p&#125;&#125;</a>    </li>    &#123;% else %&#125;    <li><a href="#">&hellip;</a></li>    &#123;% endif %&#125;    &#123;% endfor %&#125;    &#123;# 下一页 #&#125;    <li &#123;% if not pagination.has_next %&#125; class="disabled" endif>      <a href="&#123;% if pagination.has_next %&#125;               &#123;&#123;url_for(endpoint, page=pagination.next_num, **kwargs)&#125;&#125;               &#123;% endif %&#125;" aria-label="Next">        <span aria-hidden="true">&raquo;</span>      </a>    </li>  </ul></nav>&#123;% endmacro %&#125;</code></pre><h3 id="RESTful原生操作"><a href="#RESTful原生操作" class="headerlink" title="RESTful原生操作"></a>RESTful原生操作</h3><h4 id="1-CURD操作"><a href="#1-CURD操作" class="headerlink" title="1.CURD操作"></a>1.CURD操作</h4><pre><code class="python"># 添加RESTful的API接口# 获取资源列表@app.route(&#39;/posts&#39;, methods=[&#39;GET&#39;])def get_posts_list():    return &#39;GET:帖子列表展示&#39;# 获取指定资源@app.route(&#39;/posts/&lt;id&gt;&#39;, methods=[&#39;GET&#39;])def get_posts(id):    return &#39;GET:%s号帖子&#39; % id# 创建新的资源@app.route(&#39;/posts&#39;, methods=[&#39;POST&#39;])def create_posts():    return &#39;POST:资源创建已完成&#39;# 修改指定资源@app.route(&#39;/posts/&lt;id&gt;&#39;, methods=[&#39;PUT&#39;])def update_posts(id):    return &#39;PUT:%s数据更新完成&#39; % id# 删除指定资源@app.route(&#39;/posts/&lt;id&gt;&#39;, methods=[&#39;DELETE&#39;])def delete_posts(id):    return &#39;DELETE:%s号数据已删除&#39; % id</code></pre><blockquote><p>测试</p></blockquote><pre><code class="python">posts = [    &#123;        &quot;id&quot;: 1,        &quot;title&quot;: &quot;python&quot;,        &quot;content&quot;: &quot;hello python&quot;    &#125;,    &#123;        &quot;id&quot;: 2,        &quot;title&quot;: &quot;Flask&quot;,        &quot;content&quot;: &quot;hello Flask&quot;    &#125;]</code></pre><pre><code class="python"># 获取资源列表@app.route(&#39;/posts&#39;, methods=[&#39;GET&#39;])def get_posts_list():    return jsonify(&#123;&#39;posts&#39;: posts&#125;)    # 获取指定资源@app.route(&#39;/posts/&lt;int:pid&gt;&#39;, methods=[&#39;GET&#39;])def get_posts(pid):    p = list(filter(lambda t: t[&#39;id&#39;] == pid, posts))    if len(p) == 0:        abort(404)    return jsonify(&#123;&#39;posts&#39;: p[0]&#125;)# 创建新的资源@app.route(&#39;/posts&#39;, methods=[&#39;POST&#39;])def create_posts():    if not request.json or &#39;title&#39; not in request.json or\            &#39;content&#39; not in request.json:        abort(400)    post = &#123;       &quot;id&quot;: posts[-1][&#39;id&#39;]+1,       &quot;title&quot;: request.json[&#39;title&#39;],       &quot;content&quot;: request.json[&#39;content&#39;]    &#125;    posts.append(post)    return jsonify(&#123;&#39;posts&#39;: post&#125;), 201# 修改指定资源@app.route(&#39;/posts/&lt;int:pid&gt;&#39;, methods=[&#39;PUT&#39;])def update_posts(pid):    p = list(filter(lambda t: t[&#39;id&#39;] == pid, posts))    if len(p) == 0:        abort(404)    if &#39;title&#39; in request.json:        p[0][&#39;title&#39;] = request.json.get(&#39;title&#39;)    if &#39;content&#39; in request.json:        p[0][&#39;content&#39;] = request.json.get(&#39;content&#39;)    return jsonify(&#123;&#39;posts&#39;: p[0]&#125;)    # 删除指定资源@app.route(&#39;/posts/&lt;int:pid&gt;&#39;, methods=[&#39;DELETE&#39;])def delete_posts(pid):    p = list(filter(lambda t: t[&#39;id&#39;] == pid, posts))    if len(p) == 0:        abort(404)    posts.remove(p[0])    return jsonify(&#123;&#39;result&#39;: &#39;数据已经删除&#39;&#125;)</code></pre><h4 id="2-添加认证"><a href="#2-添加认证" class="headerlink" title="2.添加认证"></a>2.添加认证</h4><blockquote><p>安装<code>flask-httpauth</code>扩展库</p></blockquote><pre><code class="python">from flask_httpauth import HTTPBasicAuthauth = HTTPBasicAuth()</code></pre><pre><code class="python"># 设置认证的回调函数，需要认证时自动回调，成功返回True，失败返回False@auth.verify_passworddef verify_password(username, password):    if username == &#39;Jerry&#39; and password == &#39;123456&#39;:        return True    else:        return False@auth.error_handlerdef unauthorized():    return jsonify(&#123;&#39;error&#39;: &#39;Unauthorized Access&#39;&#125;), 403</code></pre><blockquote><p>路由保护</p></blockquote><pre><code class="python"># 获取资源列表@app.route(&#39;/posts&#39;, methods=[&#39;GET&#39;])# 添加认证（路由保护）@auth.login_requireddef get_posts_list():    return jsonify(&#123;&#39;posts&#39;: posts&#125;)</code></pre><h3 id="flask-restful扩展库的使用"><a href="#flask-restful扩展库的使用" class="headerlink" title="flask-restful扩展库的使用"></a>flask-restful扩展库的使用</h3><pre><code class="python">from flask_restful import Api, Resource# 创建Api对象api = Api(app)# 创建资源，继承Resourceclass UserAPI(Resource):    def get(self, id):        return &#123;&#39;User&#39;: &#39;GET&#39;&#125;    def put(self, id):        return &#123;&#39;User&#39;: &#39;PUT&#39;&#125;    def delete(self, id):        return &#123;&#39;User&#39;: &#39;DELETE&#39;&#125;    # 一个完整的资源一般由两个类体现class UserListAPI(Resource):    def get(self):        return &#123;&#39;UserList&#39;: &#39;GET&#39;&#125;    def post(self):        return &#123;&#39;UserList&#39;: &#39;POST&#39;&#125;# 添加资源# 参数1：资源的类名# 参数2：路由地址，可以是的多个# endpoint：端点api.add_resource(UserAPI, &#39;/user/&lt;int:id&gt;&#39;, endpoint=&#39;user&#39;)api.add_resource(UserListAPI, &#39;/user&#39;, endpoint=&#39;users&#39;)</code></pre><blockquote><p>添加认证</p></blockquote><pre><code class="python">class UserAPI(Resource    # 添加认证（资源保护）    decorators = [auth.login_required]    ...</code></pre><h4 id="1-token的生成和校验"><a href="#1-token的生成和校验" class="headerlink" title="1.token的生成和校验"></a>1.token的生成和校验</h4><pre><code class="python"># 生成tokendef generate_token(expires_in=3600):    s = Serializer(app.config[&#39;SECRET_KEY&#39;], expires_in=expires_in)    return s.dumps(&#123;&#39;username&#39;: &#39;Jerry&#39;, &#39;password&#39;: &#39;123456&#39;&#125;)# 校验tokendef check_token(token):    s = Serializer(app.config[&#39;SECRET_KEY&#39;])    try:        data = s.loads(token)    except:        return False    return data.get(&#39;username&#39;)</code></pre><blockquote><p>修改认证方式</p></blockquote><pre><code class="python"># 设置认证的回调函数，需要认证时自动回调，成功返回True，失败返回False@auth.verify_passworddef verify_password(username_or_token, password):    if username_or_token == &#39;Jerry&#39; and password == &#39;123456&#39;:        return True    else:        if check_token(username_or_token):            return True        return False</code></pre><h3 id="WSGI编写web框架"><a href="#WSGI编写web框架" class="headerlink" title="WSGI编写web框架"></a>WSGI编写web框架</h3><blockquote><p>实现函数<code>webapp.py</code></p></blockquote><pre><code class="python">def application(environ, start_response):    start_response(&#39;200 OK&#39;, [(&#39;Content-Type&#39;, &#39;text/html&#39;)])    return &#39;&lt;b&gt;Hello World&lt;/b&gt;&#39;</code></pre><blockquote><p>测试WSGI服务启动自己的框架<code>wsgi_server.py</code></p></blockquote><pre><code class="python">from wsgiref.simple_server import make_serverfrom webapp import application# 创建一个服务# 参数：host port 执行的任务server = make_server(&#39;x.x.x.x&#39;, 5000, application)server.serve_forever()</code></pre><pre><code class="shell">python3 wsgi_server.py</code></pre><blockquote><p>注意：</p><p>python3中自定义wsgi函数,make_server函数报错的问题。在<code>handlers.py</code> <strong>181</strong>行代码<code>self.write(data)</code>上面加一句：<code>data=data.encode()</code></p></blockquote><h3 id="uwsgi的使用"><a href="#uwsgi的使用" class="headerlink" title="uwsgi的使用"></a>uwsgi的使用</h3><h4 id="1-安装uwsgi"><a href="#1-安装uwsgi" class="headerlink" title="1.安装uwsgi"></a>1.安装uwsgi</h4><p><code>pip install uwsgi</code></p><h4 id="2-启动"><a href="#2-启动" class="headerlink" title="2.启动"></a>2.启动</h4><p><code>uwsgi --http x.x.x.x:8000 --wsgi-file webapp.py</code></p><blockquote><p>参数：</p><p><code>http</code> 指定主机和端口</p><p><code>socket</code> 指定socket监听的主机和端口</p><p><code>--wsgi-file</code> 应用所在模块</p><p><code>chdir</code> 启动程序后的当前目录</p><p><code>callable</code> 指定应用程序的实例</p></blockquote><blockquote><p>注意：</p><ol><li><p>安装<code>python3</code>，<code>python3-devel</code></p></li><li><p>安装gcc</p></li><li><p>浏览器刷新时报错， <code>webapp.py</code>编码错误，调用函数<code>encode(&#39;utf-8&#39;)</code></p></li></ol></blockquote><pre><code class="python">def application(environ, start_response):    start_response(&#39;200 OK&#39;, [(&#39;Content-Type&#39;, &#39;text/html&#39;)])    return &#39;&lt;b&gt;Hello World&lt;/b&gt;&#39;.encode(&#39;utf-8&#39;)                                         </code></pre><hr><blockquote><p>后台运行</p></blockquote><p><code>uwsgi -d --ini uwsgi.ini</code></p>]]></content>
      
      
      <categories>
          
          <category> web </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/04/21/hello-world/"/>
      <url>/2023/04/21/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre><code class="bash">$ hexo new &quot;My New Post&quot;</code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre><code class="bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre><code class="bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre><code class="bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
